# This workflow will upload a Python Package using Twine when a release is created
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-python#publishing-to-package-registries

# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

name: Upload Python Package

on:
  release:
    types: [published]

permissions:
  contents: read

jobs:
  deploy:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3
    - name: Set up Python
      uses: actions/setup-python@v3
      with:
        python-version: '3.7'
#     - name: Install dependencies
#       run: |
#         python -m pip install --upgrade pip
#         pip install build
    - name: Nexus IQ for GitHub Actions
      uses: sonatype-nexus-community/iq-github-action@1.1.1
      with:
        # Nexus IQ Server URL
        serverUrl: ${{ secrets.iqurl }}
        # Username to connect to IQ Server for policy evaluation
        username: ${{ secrets.iquser }}
        # Password to connect to IQ Server for policy evaluation
        password: ${{ secrets.iqpassword }}
        # Determines the policy elements (policies, labels, and license threat groups) to associate with this build, and is managed via the Nexus IQ Server.
        applicationId: dvpwa__bcbarbosa_2
        # Controls the stage the policy evaluation will be run against on the Nexus IQ Server.
        stage: build
        # This is the path to a specific application archive file, a directory containing such archives or the ID of a Docker image. For archives, a number of formats are supported, including jar, war, ear, tar, tar.gz, zip and many others.
        target: .
#     - name: Build package
#       run: python -m build
#     - name: Publish package
#       uses: pypa/gh-action-pypi-publish@27b31702a0e7fc50959f5ad993c78deac1bdfc29
#       with:
#         user: __token__
#         password: ${{ secrets.PYPI_API_TOKEN }}
